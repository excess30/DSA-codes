#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 5
struct Vertex
{
    char lable;
    bool visited;
};
int stack[MAX];
int top=-1;
struct Vertex *lstvertices[MAX];
int adjMatrix[MAX][MAX];
int vertexCount=0;
void push(int item)
{
    stack[top++]=item;
}
int pop()
{
    return stack[top--];
}
int peek()
{
    return stack[top];
}
bool isStackEmpty()
{
    return top== -1;
}
void addVertex(char lable)
{
    struct Vertex *vertex=(struct Vertex*)malloc(sizeof(struct Vertex));
    vertex->lable=lable;
    vertex->visited=false;
    lstvertices[vertexCount++]=vertex;
}
void addEdge(int start,int end)
{
   adjMatrix[start][end] = 1;
   adjMatrix[end][start] = 1;
}
void displayVertex(int vertexIndex)
{
    printf("%c",lstvertices[vertexIndex]->lable);
}
int getAdjUnvisitedVertex(int vertexIndex)
{
    int i;
    for(i=0;i< vertexCount;i++)
    {
        if(adjMatrix[vertexIndex][i]==1 && lstvertices[i]->visited==false)
        {
            return i;
        }
    }
    return -1;
}
void depthFirstSearch()
{
    int i;
     lstvertices[0]->visited = true;
   displayVertex(0);   
   push(0);

   while(!isStackEmpty()) 
   {
      int unvisitedVertex = getAdjUnvisitedVertex(peek());
      if(unvisitedVertex == -1) 
      {
         pop();
      } 
      else 
      {
         lstvertices[unvisitedVertex]->visited = true;
         displayVertex(unvisitedVertex);
         push(unvisitedVertex);
      }
   }      
   for(i = 0;i < vertexCount;i++) {
      lstvertices[i]->visited = false;
   }        
}
int main() 
{
   int i, j;
   for(i = 0; i < MAX; i++)
   {
      for(j = 0; j < MAX; j++) 
      {
          adjMatrix[i][j] = 0;
   }
   }
   addVertex('S');   
   addVertex('A');   
   addVertex('B');   
   addVertex('C');   
   addVertex('D');   
   addEdge(0,1);
   addEdge(0,2);
   addEdge(0,3);
   addEdge(0,4);
   addEdge(0,5);
   printf("Depth First Search: ");
   depthFirstSearch(); 
   return 0;   
}
