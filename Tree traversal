
#include <stdio.h>
#include <stdlib.h>

/*
 * 
 */
struct node
{
    int data;
    struct node *leftChild;
    struct node *rightChild;
};
struct node *root=NULL;
void insert(int data)
{
    struct node *link=(struct node*)malloc(sizeof(struct node));
    struct node *curr;
    struct node *parent;
    link->data=data;
    link->leftChild=NULL;
    link->rightChild=NULL;
    if(root==NULL)
    {
        root=link;
    }
    else
    {
        curr=root;
        parent=NULL;
    }
    while(1)
    {
    parent=curr;
    if(data < parent->data)
    {
       curr=curr->leftChild; 
    }
    if(curr==NULL)
    {
        parent->leftChild=link;
        return;
    }
    else
    {
       curr=curr->rightChild; 
    }
    if(curr==NULL)
    {
        parent->rightChild=link;
        return;
    }
    }
}
void pre_order_traversal(struct node *root)
{
    if(root!=NULL)
    {
    printf("%d",root->data);
    pre_order_traversal(root->leftChild);
    pre_order_traversal(root->rightChild);
    }
}
void in_order_traversal(struct node *root)
{
    if(root!=NULL)
    {
    in_order_traversal(root->leftChild);
    printf("%d",root->data);
    in_order_traversal(root->rightChild);
    }
}
void post_order_traversal(struct node *root)
{
    if(root!=NULL)
    {
    post_order_traversal(root->leftChild);
    post_order_traversal(root->rightChild);
    printf("%d",root->data);
    }
}
int main() 
{
   int i;
   int array[7] = { 27, 14, 35, 10, 19, 31, 42 };
   for(i = 0; i < 7; i++)
   insert(array[i]);
   printf("\nPreorder traversal: ");
   pre_order_traversal(root);
   printf("\nInorder traversal: ");
   in_order_traversal(root);
   printf("\nPost order traversal: ");
   post_order_traversal(root);       
   return 0;
}

